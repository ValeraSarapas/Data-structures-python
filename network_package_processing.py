Реализовать обработчик сетевых пакетов. 
Вход. Размер буфера size и число пакетов n, а также две последовательности arrival_1,...,arrival_n и duration_1,...,duration_n, 
обозначающих время поступления и длительность обработки n пакетов.
Выход. Для каждого из данных n пакетов необходимо вывести время начала его обработки или −1, если пакет не был обработан (это происходит в случае, 
когда пакет поступает в момент, когда в буфере компьютера уже находится size пакетов)

Формат входа. Первая строка входа содержит размер буфера size и
число пакетов n. Каждая из следующих n строк содержит два
числа: время arrival_i прибытия i-го пакета и время duration_i,
необходимое на его обработку. Гарантируется, что arrival_1 ≤
arrival_2 ≤ · · · ≤ arrival_n. При этом может оказаться, что
arrival_i−1 = arrival_i. В таком случае считаем, что пакет i − 1 поступил раньше пакета i.

Формат выхода. Для каждого из n пакетов выведите время, когда
процессор начал его обрабатывать, или −1, если пакет был отброшен.
Ограничения. Все числа во входе целые. 1 ≤ size ≤ 10^5; 0 ≤ n ≤ 10^5;
0 ≤ arrivali ≤ 10^6; 0 ≤ durationi ≤ 10^3; arrivali ≤ arrivali+1 для всех
1 ≤ i ≤ n − 1.

Пример.
Вход:
1 0
Выход: Если пакетов нет, выводить ничего не нужно.

Пример.
Вход:
1 1
0 0
Выход:
0
Пакет поступил в момент времени 0, и компьютер тут же начал
его обрабатывать.

Пример.
Вход:
1 2
0 1
0 1
Выход:
0
-1
Первый пакет поступил в момент времени 0, второй пакет поступил также в момент времени 0, но был отброшен, поскольку буфер в этот момент полностью заполнен (первым пакетом).
Первый пакет начал обрабатываться в момент времени 0, второй был отброшен.

Пример.
Вход:
1 2
0 1
1 1
Выход:
0
1

def buffer_sim(size, packets):
    ends = []
    for start, length in packets:
        time = ends[-1] if ends else start
        while ends and ends[0] <= start:
            del ends[0]
        result = -1
        if len(ends) < size:
            result = max(time, start)
            ends.append(result + length)
        yield result

if __name__ == "__main__":
    import sys
    input_gen = (map(int, line.split()) for line in sys.stdin)
    size, npackets = next(input_gen)
    print(*buffer_sim(size, input_gen), sep="\n")
